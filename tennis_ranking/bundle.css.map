{
  "version": 3,
  "file": "bundle.css",
  "sources": [
    "..\\src\\App.svelte",
    "..\\src\\PlayerPicker.svelte"
  ],
  "sourcesContent": [
    "<script>\r\n  import { onMount } from \"svelte\";\r\n  import PlayerPicker from \"./PlayerPicker.svelte\";\r\n  import RatingPlot from \"./RatingPlot.svelte\";\r\n  import { getLineColour, releaseLineColour } from \"./colourcache.js\";\r\n\r\n  let playerIndices = {};\r\n  let playerNames = [];\r\n\r\n  let playerRatingDict = {};\r\n  let playerDataToShow = [];\r\n\r\n  let plotWidth, plotHeight;\r\n\r\n  onMount(async () => {\r\n    //Load top-level player data, individual histories are loaded on-demand\r\n    const res = await fetch(`../data/players.json`);\r\n    let playerTLData = await res.json();\r\n    //sort into descending rating order\r\n    playerTLData.sort((a, b) => {\r\n      return b.latest_rating - a.latest_rating;\r\n    });\r\n\r\n    //get the top 50 - will be selectable filter at some point\r\n    playerIndices = {};\r\n    for (let e of playerTLData.slice(0, 50)) {\r\n      playerIndices[e.name] = e;\r\n    }\r\n    playerNames = Object.keys(playerIndices);\r\n    playerNames.sort();\r\n  });\r\n\r\n  //Loads individual rating data\r\n  async function loadPlayerData(playerName) {\r\n    const index = playerIndices[playerName][\"index\"];\r\n    const res = await fetch(`../data/${index}.json`);\r\n    const pd = await res.json();\r\n    pd[\"name\"] = playerName;\r\n    return pd;\r\n  }\r\n\r\n  let playerLineColour = {};\r\n\r\n  //Handles changes to selected players for display.\r\n  //Loads rating data if needed and allocates/releases colours.\r\n  async function updatePlayerData(players) {\r\n    let retList = [];\r\n\r\n    //removals\r\n    for (const l of playerDataToShow) {\r\n      let playerName = l.name;\r\n      if (!players.includes(playerName)) {\r\n        releaseLineColour(playerLineColour[playerName]);\r\n        delete playerLineColour[playerName];\r\n        //ugh... svelte assignment requirement. Find prettier way.\r\n        playerLineColour = playerLineColour;\r\n      }\r\n    }\r\n\r\n    for (const p of players) {\r\n      if (!(p in playerRatingDict)) {\r\n        let ld = await loadPlayerData(p);\r\n        playerRatingDict[p] = ld;\r\n      }\r\n\r\n      let pd = playerRatingDict[p];\r\n\r\n      if (!(p in playerLineColour)) {\r\n        playerLineColour[p] = getLineColour();\r\n        pd[\"colour\"] = playerLineColour[p];\r\n        playerLineColour = playerLineColour;\r\n      }\r\n\r\n      retList.push(pd);\r\n    }\r\n\r\n    return retList;\r\n  }\r\n\r\n  let selectionChanged = event => {\r\n    (async () => {\r\n      let temp = await updatePlayerData(event.detail);\r\n      playerDataToShow = temp;\r\n    })();\r\n    console.log(\"got new selection: \" + event.detail);\r\n  };\r\n\r\n  //$: console.log(`w: ${plotWidth}, h: ${plotHeight}`);\r\n\r\n</script>\r\n\r\n<style>\r\n  .plot-container {\r\n    display: inline-block;\r\n    position: relative;\r\n    width: 100%;\r\n    height: 66vh;\r\n    min-height: 300px;\r\n    vertical-align: middle;\r\n    overflow: hidden;\r\n  }\r\n</style>\r\n\r\n<svelte:head>\r\n  <style>\r\n    html {\r\n      background-color: #faf5dc;\r\n    }\r\n  </style>\r\n</svelte:head>\r\n\r\n<h2>Glicko 2 Tennis Ratings</h2>\r\n<div class=\"plot-container\" bind:clientWidth={plotWidth} bind:clientHeight={plotHeight}>\r\n  <RatingPlot {playerDataToShow} containerW={plotWidth} containerH={plotHeight} />\r\n</div>\r\n\r\n<div class=\"picker-container\">\r\n  <PlayerPicker\r\n    on:selectionChanged={selectionChanged}\r\n    playerList={playerNames}\r\n    playerColours={playerLineColour} \r\n    maxSelectable=8/>\r\n</div>\r\n",
    "<script>\r\n  import { createEventDispatcher } from \"svelte\";\r\n  import { send, receive } from \"./crossfade.js\";\r\n\r\n  const dispatch = createEventDispatcher();\r\n\r\n  //prop - list of players to pick from\r\n  export let playerList = [];\r\n  //prop - lookup for player colours\r\n  export let playerColours = {};\r\n  export let maxSelectable = 0;\r\n\r\n  let selectedPlayers = [];\r\n  let selectedLength = 0;\r\n\r\n  $: if (selectedLength != selectedPlayers.length) {\r\n    selectedLength = selectedPlayers.length;\r\n    dispatch(\"selectionChanged\", selectedPlayers);\r\n  }\r\n\r\n  const selectPlayer = p => {\r\n    if (selectedPlayers.length < maxSelectable) {\r\n      if (selectedPlayers.includes(p)) return; //should this be necessary? Getting double selections.\r\n      playerList = playerList.filter(entry => entry !== p);\r\n      selectedPlayers.push(p);\r\n      selectedPlayers.sort();\r\n      selectedPlayers = selectedPlayers;\r\n    }\r\n  };\r\n\r\n  const deselectPlayer = p => {\r\n    selectedPlayers = selectedPlayers.filter(entry => entry !== p);\r\n    playerList.push(p);\r\n    playerList.sort();\r\n  };\r\n</script>\r\n\r\n<style>\r\n  .pp_container {\r\n    display: flex;\r\n    flex-direction: column;\r\n  }\r\n\r\n  .selector_button {\r\n    margin: 2px;\r\n  }\r\n\r\n  .selected_button {\r\n    margin: 2px;\r\n  }\r\n\r\n  .pp_selector_div {\r\n    display: flex;\r\n    flex-direction: row;\r\n    flex-wrap: wrap;\r\n    max-height: 200px;\r\n    overflow-y: auto;\r\n  }\r\n  .pp_selected_div {\r\n    display: flex;\r\n    flex-direction: row;\r\n    flex-wrap: wrap;\r\n  }\r\n</style>\r\n\r\n<div class=\"pp_container\">\r\n  <h3>Selected Players</h3>\r\n  <div class=\"pp_selected_div\">\r\n    {#each selectedPlayers as player (player)}\r\n      <label\r\n        in:receive={{ key: player }}\r\n        out:send={{ key: player }}\r\n        on:click={() => deselectPlayer(player)}>\r\n        <button\r\n          class=\"selected_button\"\r\n          type=\"button\"\r\n          style=\"background-color:{playerColours[player]}\">\r\n          {player}\r\n        </button>\r\n      </label>\r\n    {/each}\r\n\r\n  </div>\r\n  <h3>Select Players ({maxSelectable} max)</h3>\r\n  <div class=\"pp_selector_div\">\r\n    {#each playerList as player (player)}\r\n      <label\r\n        in:receive={{ key: player }}\r\n        out:send={{ key: player }}\r\n        on:click={() => selectPlayer(player)}>\r\n        <button class=\"selector_button\" type=\"button\">{player}</button>\r\n      </label>\r\n    {/each}\r\n  </div>\r\n\r\n</div>\r\n"
  ],
  "names": [],
  "mappings": "AA4FE,eAAe,cAAC,CAAC,AACf,OAAO,CAAE,YAAY,CACrB,QAAQ,CAAE,QAAQ,CAClB,KAAK,CAAE,IAAI,CACX,MAAM,CAAE,IAAI,CACZ,UAAU,CAAE,KAAK,CACjB,cAAc,CAAE,MAAM,CACtB,QAAQ,CAAE,MAAM,AAClB,CAAC;AC9DD,aAAa,cAAC,CAAC,AACb,OAAO,CAAE,IAAI,CACb,cAAc,CAAE,MAAM,AACxB,CAAC,AAED,gBAAgB,cAAC,CAAC,AAChB,MAAM,CAAE,GAAG,AACb,CAAC,AAED,gBAAgB,cAAC,CAAC,AAChB,MAAM,CAAE,GAAG,AACb,CAAC,AAED,gBAAgB,cAAC,CAAC,AAChB,OAAO,CAAE,IAAI,CACb,cAAc,CAAE,GAAG,CACnB,SAAS,CAAE,IAAI,CACf,UAAU,CAAE,KAAK,CACjB,UAAU,CAAE,IAAI,AAClB,CAAC,AACD,gBAAgB,cAAC,CAAC,AAChB,OAAO,CAAE,IAAI,CACb,cAAc,CAAE,GAAG,CACnB,SAAS,CAAE,IAAI,AACjB,CAAC"
}